==================================================================
               Mystic Nights Server Interface Control Document
==================================================================
Version: 0.9.11
Date:    2025-07-13

This document describes the binary packet protocol between the Mystic Nights
game client and server. Packets are listed by direction, with structure
definitions and descriptions where available.

==================================================================
I.  Client -> Server Packets
==================================================================

+--------------------------+----------+-----------------------------------------+
| Packet Name              | PacketID | Description                             |
+--------------------------+----------+-----------------------------------------+
| Account Create           | 0x07d1   | Client requests new account creation.   |
| Account Delete           | 0x07d2   | Client requests deletion of account.    |
| Channel List Request     | 0x07d3   | Requests channel list, also triggers    |
| Channel Join             | 0x07d4   | Join a channel (sets server/channel).   |
| Lobby Create Request     | 0x07d5   | Client requests to create a lobby.      |
| Lobby Join Request       | 0x07d6   | Client requests to join a lobby.        |
| Quick Join Request       | 0x07d7   | Join a random public, not-full lobby.   |
| Game Start Request       | 0x07d8   | Lobby leader requests game start.       |
| Player Ready Request     | 0x07d9   | Non-leader player toggles ready.        |
| Lobby Leave Request      | 0x07da   | Client requests to leave lobby.         |
| Kick Player Request      | 0x07db   | Lobby leader requests to kick player.   |
| Character Select Query   | 0x07dc   | Requests info for char select screen.   |
| Character Select Commit  | 0x07dd   | Confirms char select; value=character.  |
| Map Select Request       | 0x07de   | Lobby leader changes map in lobby.      |
| Server List Request      | 0x07df   | Requests server list.                   |
| Lobby List Request       | 0x07e0   | Requests lobby list for channel/server. |
| Game Ready Check         | 0x03f0   | Client ready for Countdown.             |
| Player Disconnect        | 0x03f1   | In-game leave/disconnect.               |
| Game Over                | 0x03f2   | Indicates end of match, resets lobby.   |
| Game Result/Rank Update  | 0x03f3   | Victory/defeat, triggers rank update.   |
| Echo Reply               | 0x03ea   | Response to server echo challenge.      |
+--------------------------+----------+-----------------------------------------+

Client -> Server packet structure only partially documented.

--------------------------------------------------
Account Create Request (0x07d1)
--------------------------------------------------
| Offset | Size | Type       | Field     | Notes              |
|--------|------|------------|-----------|--------------------|
| 0x00   | 2    | uint16     | packet_id | Always 0x07d1      |
| 0x02   | 2    | uint16     | length    | Payload length     |
| 0x04   | 12   | char[12]   | username  | ASCII, zero-padded |
| 0x10   | 12   | char[12]   | password  | ASCII, zero-padded |

--------------------------------------------------
Channel Join Request (0x07d4)
--------------------------------------------------
| Offset | Size | Type     | Field     | Notes        |
|--------|------|----------|-----------|--------------|
| 0x00   | 2    | uint16   | packet_id | 0x07d4       |
| 0x02   | 2    | uint16   | length    | Payload len  |
| 0x04   | 8    | char[8]  | username  | ASCII        |
| 0x14   | 2    | uint16   | channel   | Channel num  |
|  ...   | ...  | ...      | ...       | (Unknown)    |

--------------------------------------------------
Lobby Create Request (0x07d5)
--------------------------------------------------
| Offset | Size | Type     | Field      | Notes                                |
|--------|------|----------|------------|--------------------------------------|
| 0x00   | 2    | uint16   | packet_id  | Always 0x07d5                        |
| 0x02   | 2    | uint16   | length     | Payload length                       |
| 0x04   | 4    | char[4]  | player_id  | ASCII, zero-padded                   |
| 0x08   | 8    | unknown  | (padding?) | (Bytes between player_id & name)     |
| 0x10   | 12   | char[12] | name       | ASCII, zero-padded                   |
| 0x1C   | 8    | char[8]  | password   | ASCII, zero-padded                   |
|  ...   | ...  | ...      | ...        | (Possible padding/unknowns)          |

> - Only upper-case letters/numbers are accepted for name/password.
> - If password is empty, lobby is public; otherwise, private.
> - Lobby is created on the server with a unique `room_id`, and player is added to the players list.

--------------------------------------------------
Lobby Join Request (0x07d6)
--------------------------------------------------
| Offset | Size | Type     | Field      | Notes                                |
|--------|------|----------|------------|--------------------------------------|
| 0x00   | 2    | uint16   | packet_id  | Always 0x07d6                        |
| 0x02   | 2    | uint16   | length     | Payload length                       |
| 0x04   | 4    | char[4]  | player_id  | ASCII, zero-padded                   |
| 0x08   | 16   | unknown  | (padding?) |                                      |
| 0x18   | 12   | char[12] | name       | ASCII, zero-padded                   |
|  ...   | ...  | ...      | ...        | (Possible padding/unknowns)          |

> - Server matches `lobby_name` by raw ASCII comparison.
> - If found and not full, player is added; otherwise, ignored or rejected.

--------------------------------------------------
Game Start Request (0x07d8)
--------------------------------------------------
| Offset | Size | Type     | Field      | Notes                              |
|--------|------|----------|------------|------------------------------------|
| 0x00   | 2    | uint16   | packet_id  | Always 0x07d8                      |
| 0x02   | 2    | uint16   | length     | Payload length (0x000d)            |
| 0x04   | 0x0D | bytes    | player_id  | ASCII, zero-padded (typically 4 bytes, padded to 0x0D with 0x00) |

> - The player ID is the initiating player.
> - Sent when a player clicks "Start Game" or equivalent in the lobby menu.
> - "Start Game" is only available in the lobby menu if the player is the lobby leader (HOST).
> - Example: `d8070d0042414241000000000000000000` ("BABA" as player_id)

--------------------------------------------------
Player Ready Request (0x07d9)
--------------------------------------------------
| Offset | Size | Type     | Field      | Notes                              |
|--------|------|----------|------------|------------------------------------|
| 0x00   | 2    | uint16   | packet_id  | Always 0x07d8                      |
| 0x02   | 2    | uint16   | length     | Payload length (0x000d)            |
| 0x04   | 0x0D | bytes    | player_id  | ASCII, zero-padded (typically 4 bytes, padded to 0x0D with 0x00) |

> - The player ID is the initiating player.
> - Sent when a player clicks "Game Ready" or equivalent in the lobby menu.
> - "Game Ready" is only available in the lobby menu if the player is NOT the lobby leader (HOST).
> - Example: `d9070d0042414241000000000000000000` ("BABA" as player_id)

--------------------------------------------------
Lobby Leave Request (0x07da)
--------------------------------------------------
| Offset | Size | Type     | Field      | Notes                        |
|--------|------|----------|------------|------------------------------|
| 0x00   | 2    | uint16   | packet_id  | Always 0x07da                |
| 0x02   | 2    | uint16   | length     | Payload length (usually 0x0d)|
| 0x04   | 4    | char[4]  | player_id  | ASCII/EUC-KR, zero-padded    |
| 0x08   | ...  | unknown  | padding    | Typically all 0x00           |

- The server must reply with a 0x0bc2 ACK (Lobby Leave Ack).
- After ACK, the server removes the player from the lobby.
- No follow-up packets are required.

--------------------------------------------------
Kick Player Request (0x07db)
--------------------------------------------------
| Offset | Size | Type     | Field        | Notes                                |
|--------|------|----------|--------------|--------------------------------------|
| 0x00   | 2    | uint16   | packet_id    | Always 0x07db                        |
| 0x02   | 2    | uint16   | length       | Payload length (usually 0x04)        |
| 0x04   | 4    | uint32   | player_index | Index of player to remove (0–3)      |

- The server must first reply with a 0x0bc3 ACK.
- The server must then remove the player at `player_index` from the lobby and send an updated 0x03ee Lobby Room Info packet to all players in the lobby.

--------------------------------------------------
Character Select Query (0x07dc) 
--------------------------------------------------
| Offset | Size | Type     | Field      | Notes                          |
|--------|------|----------|------------|--------------------------------|
| 0x00   | 2    | uint16   | packet_id  | Always 0x07dc                  |
| 0x02   | 2    | uint16   | length     | Payload length (always 0x08)   |
| 0x04   | 4    | char[4]  | player_id  | ASCII, zero-padded             |

- Sent repeatedly by client during character select menu.
- Server must reply with 0xbc4 (Character Select Setup) for the requested player.

--------------------------------------------------
Character Select Commit (0x07dd) 
--------------------------------------------------
| Offset | Size | Type     | Field      | Notes                          |
|--------|------|----------|------------|--------------------------------|
| 0x00   | 2    | uint16   | packet_id  | Always 0x07dd                  |
| 0x02   | 2    | uint16   | length     | Payload length (always 0x08)   |
| 0x04   | 1    | uint8    | character  | Character value (1-8)          |
| 0x05   | 3    | uint8[3] | padding    | 0x00                           |

- Sent when client confirms character select.
- Server must:
  1. Reply with 0xbc5 (Character Select ACK)
  2. Immediately follow with updated 0x03ee reflecting the change

--------------------------------------------------
Map Select Request (0x07de) 
--------------------------------------------------
| Offset | Size | Type     | Field      | Notes                          |
|--------|------|----------|------------|--------------------------------|
| 0x00   | 2    | uint16   | packet_id  | Always 0x07de                  |
| 0x02   | 2    | uint16   | length     | Payload length (always 0x08)   |
| 0x04   | 4    | uint32le | map_index  | Little-endian (1-5)            |

> - "Map Select" is only available in the lobby menu if the player is the lobby leader (HOST).

--------------------------------------------------
Echo Reply (0x03ea) 
--------------------------------------------------
| Offset | Size | Type     | Field         | Notes                                   |
|--------|------|----------|---------------|-----------------------------------------|
| 0x00   | 2    | uint16   | packet_id     | 0x03ea (reply)                          |
| 0x02   | 2    | uint16   | payload_len   | 4                                       |
| 0x04   | 4    | bytes    | token/flag    | Echo back whatever is sent from server  |

- Sent when server sends an Echo Challenge (0x03e9).
- No further reply expected from server for this packet.


==================================================================
II.  Server -> Client Packets
==================================================================

+-------------------------------+----------+-----------------------------------------------+
| Packet Name                   | PacketID | Description                                   |
+-------------------------------+----------+-----------------------------------------------+
| Account Create Result         | 0x0bba   | Account creation result.                      |
| Account Delete Result         | 0x0bb9   | Account deletion result.                      |
| Channel Join Ack              | 0x0bbc   | Channel join acknowledgement.                 |
| Channel List Response         | 0x0bbb   | List of available channels.                   |
| Lobby Create Ack              | 0x0bbd   | Lobby creation acknowledgement.               |
| Lobby Join Ack                | 0x0bbe   | Lobby join acknowledgement.                   |
| Quick Join Ack                | 0x0bbf   | Acknowledges quick join.                      |
| Lobby List Response           | 0x0bc8   | List of lobbies in channel/server.            |
| Login Result                  | 0x0bb8   | Login result.                                 |
| Server List Response          | 0x0bc7   | List of available servers.                    |
| Game Start Response           | 0x0bc0   | Provides all game initialization information. |
| Player Ready Ack              | 0x0bc1   | Non-HOST player ready state toggles.          |
| Lobby Leave Ack               | 0x0bc2   | Acknowledges lobby leave.                     |
| Kick Player Ack               | 0x0bc3   | Acknowledges kick player.                     |
| Character Select Setup        | 0x0bc4   | Character select handshake start.             |
| Character Select Ack          | 0x0bc5   | Acknowledges character selection.             |
| Map Select Ack                | 0x0bc6   | Acknowledges map selection.                   |
| Lobby Room State              | 0x03ee   | Full lobby state including map/players.       |
| Player DC                     | 0x03f4   | Player Disconnect/Timeout notification.       |
| Countdown                     | 0x03ef   | Countdown (4,3,2,1,0) before game starts.     |
| Echo Challenge                | 0x03e9   | Echo challenge from server to client.         |
+-------------------------------+----------+-----------------------------------------------+

--------------------------------------------------
Account Create Result (0x0bba)
--------------------------------------------------
| Offset | Size | Type     | Field       | Notes                                              |
|--------|------|----------|-------------|----------------------------------------------------|
| 0x00   | 2    | uint16   | packet_id   | 0x0bba                                             |
| 0x02   | 2    | uint16   | payload_len |                                                    |
| 0x04   | 4/1  | uint8[4] | flag        | 0x01 00 00 00 on success, 0x00 on failure          |
| 0x08   | 2    | uint16   | val         | 1 on success; error code on failure (see below)    |
Error Codes (val): 9 = Account already exists.
Example: ba 0b 06 00 01 00 00 00 01 00 (success)

--------------------------------------------------
Account Delete Result (0x0bb9)
--------------------------------------------------
| Offset | Size | Type     | Field       | Notes                                              |
|--------|------|----------|-------------|----------------------------------------------------|
| 0x00   | 2    | uint16   | packet_id   | 0x0bb9                                             |
| 0x02   | 2    | uint16   | payload_len |                                                    |
| 0x04   | 4/1  | uint8[4] | flag        | 0x01 00 00 00 on success, 0x00 on failure          |
| 0x08   | 2    | uint16   | val         | 1 on success; error code on failure (see below)    |
Error Codes (val): 4 = Database error, 7 = Incorrect password, 8 = No such player.
Example: b9 0b 06 00 01 00 00 00 01 00 (success)

--------------------------------------------------
Channel List Response (0x0bbb)
--------------------------------------------------
| Offset | Size    | Type        | Field         | Notes                                              |
|--------|---------|-------------|---------------|----------------------------------------------------|
| 0x00   | 2       | uint16      | packet_id     | 0x0bbb                                             |
| 0x02   | 2       | uint16      | payload_len   | Always 0x91 (145)                                  |
| 0x04   | 4       | uint8[4]    | flag          | 0x01 00 00 00 (success)                            |
| 0x08   | 36×12   | struct      | channel_list  | 12 channels, see below                             |

channel_list entry (repeats 12 times, one per channel index)
| Offset | Size | Type   | Field         | Notes                        |
|--------|------|--------|---------------|------------------------------|
| +0x00  | 4    | uint32 | channel_index | Channel index, starting at 0 |
| +0x04  | 4    | uint32 | cur_players   | Current player count         |
| +0x08  | 4    | uint32 | max_players   | Always 80                    |

**Example:**  
bb 0b 91 00 01 00 00 00 00 00 00 00 ... (12 channel entries)

--------------------------------------------------
Channel Join Ack (0x0bbc)
--------------------------------------------------
| Offset | Size | Type     | Field       | Notes                                              |
|--------|------|----------|-------------|----------------------------------------------------|
| 0x00   | 2    | uint16   | packet_id   | 0x0bbc                                             |
| 0x02   | 2    | uint16   | payload_len |                                                    |
| 0x04   | 4/1  | uint8[4] | flag        | 0x01 00 00 00 on success, 0x00 (padded) on failure |
| 0x08   | 2    | uint16   | val         | 1 on success; error code on failure (see below)    |

Error Codes (val):  
5 = Invalid server/channel.

**Example:**  
bc 0b 06 00 01 00 00 00 01 00 (success)

--------------------------------------------------
Lobby Create Ack (0x0bbd)
--------------------------------------------------
| Offset | Size | Type    | Field     | Notes                                                 |
|--------|------|---------|-----------|-------------------------------------------------------|
| 0x00   | 2    | uint16  | packet_id | 0x0bbd                                                |
| 0x02   | 2    | uint16  | length    |                                                       |
| 0x04   | 4/1  | bytes   | status    | 0x01 0x00 0x00 0x00 = success; 0x00 = failure         |
| 0x08   | 2    | uint16  | value     | Success: idx_in_channel; Failure: error code          |

> On success, value is the lobby idx_in_channel (0–19).
> On failure, value indicates the error code:
>   0x10 = Lobby name already exists
>   0x0d = No available lobby slots
>   0x05 = Invalid/missing parameter

> Example (success, idx_in_channel = 3): `bd0b0600 01000000 0300`
> Example (failure, lobby exists):         `bd0b0600 00 1000`

--------------------------------------------------
Lobby Join Ack (0x0bbe)
--------------------------------------------------
| Offset | Size | Type    | Field     | Notes                                                 |
|--------|------|---------|-----------|-------------------------------------------------------|
| 0x00   | 2    | uint16  | packet_id | 0x0bbe                                                |
| 0x02   | 2    | uint16  | length    |                                                       |
| 0x04   | 4/1  | bytes   | status    | 0x01 0x00 0x00 0x00 = success; 0x00 = failure         |
| 0x08   | 2    | uint16  | value     | Success: idx_in_channel; Failure: error code (see below) |

> On success, value is the lobby idx_in_channel (0–19).
> On failure, value indicates the error code:
>   0x0f = Lobby does not exist
>   0x0e = Game already started
>   0x0a = Lobby full
>   0x05 = Invalid parameter
>   0x04 = Database error

> Example (success, idx_in_channel = 4): `be0b0600 01000000 0400`
> Example (failure, lobby full):           `be0b0600 00 0a00`

--------------------------------------------------
Lobby Quick Join Ack (0x0bbf)
--------------------------------------------------
| Offset | Size | Type    | Field     | Notes                                                 |
|--------|------|---------|-----------|-------------------------------------------------------|
| 0x00   | 2    | uint16  | packet_id | 0x0bbf                                                |
| 0x02   | 2    | uint16  | length    |                                                       |
| 0x04   | 4/1  | bytes   | status    | 0x01 0x00 0x00 0x00 = success; 0x00 = failure         |
| 0x08   | 2    | uint16  | value     | Success: idx_in_channel; Failure: error code (see below) |

> On success, value is the lobby idx_in_channel (0–19).
> On failure, value indicates the error code:
>   0x0d = No available lobbies to join
>   0x05 = Invalid server/channel
>
> Example (success, idx_in_channel = 2):  `bf0b0600 01000000 0200`
> Example (failure, no public lobby):     `bf0b0600 00 0d00`

--------------------------------------------------
Lobby List Response (0x0bc8)
--------------------------------------------------
| Offset | Size | Type     | Field          | Notes                                |
|--------|------|----------|----------------|--------------------------------------|
| 0x00   | 4    | bytes    | flag           | Always 0x01 00 00 00                 |
| 0x04   | 44   | struct   | lobbies[20]    | See below; 20 entries, 44 bytes each |

Each lobby entry (44 bytes):
| Offset | Size | Type      | Field         | Notes                             |
|--------|------|-----------|---------------|-----------------------------------|
| 0x00   | 4    | uint32    | idx_in_chan   | Lobby index in channel            |
| 0x04   | 4    | uint32    | player_count  | Players in lobby (0-4)            |
| 0x08   | 4    | uint32    | max_players   | Always 4                          |
| 0x0C   | 16   | char[16]  | name          | euc-kr, null-padded               |
| 0x1C   | 1    | uint8     | pad1          | Always 0x00                       |
| 0x1D   | 12   | char[12]  | password      | euc-kr, null-padded               |
| 0x29   | 1    | uint8     | pad2          | Always 0x00                       |
| 0x2A   | 1    | uint8     | status        | 0=empty, 1=waiting, 2=started     |
| 0x2B   | 1    | uint8     | pad3          | Always 0x00                       |

> Example (hex, first lobby):
> `01 00 00 00 00 00 00 00 02 00 00 00 04 00 00 00 4c 6f 62 62 79 31 ... 00 00 ...`

--------------------------------------------------
Login Result (0x0bb8)
--------------------------------------------------
| Offset | Size | Type    | Field      | Notes                                    |
|--------|------|---------|------------|------------------------------------------|
| 0x00   | 2    | uint16  | packet_id  | 0x0bb8                                   |
| 0x02   | 2    | uint16  | length     | Always 0x0006 (6 bytes payload)          |
| 0x04   | 4/1  | bytes   | status     | 0x01 00 00 00 = success                  |
|        |      |         |            | 0x00           = failure                 |
| 0x08   | 2    | uint16  | reason     | 1 = success; see code for error values   |

-reason varies for failures (e.g., 7 = incorrect password, 8 = user not found, etc.).
> Example (success, hex): `b8 0b 06 00 01 00 00 00 01 00`
> Example (failure, hex): `b8 0b 06 00 00 07 00`


--------------------------------------------------
Server List Response (0x0bc7)
--------------------------------------------------
| Offset | Size | Type     | Field           | Notes                                 |
|--------|------|----------|-----------------|---------------------------------------|
| 0x00   | 4    | bytes    | flag            | Always 0x01 00 00 00                  |
| 0x04   | 44   | struct   | servers[10]     | See below; 10 entries, 44 bytes each  |

Each server entry (44 bytes):
| Offset | Size | Type      | Field         | Notes                                 |
|--------|------|-----------|---------------|---------------------------------------|
| 0x00   | 16   | char[16]  | name          | euc-kr, null-padded                   |
| 0x10   | 5    | uint8[5]  | reserved1     | Always 0x00                           |
| 0x15   | 16   | char[16]  | ip_address    | ASCII ("x.x.x.x\0"), null-padded      |
| 0x25   | 3    | uint8[3]  | reserved2     | Always 0x00                           |
| 0x28   | 4    | int32     | availability  | -1=offline, 0=low, 1=med, 2=high      |

--------------------------------------------------
Character Select Setup (0x0bc4)
--------------------------------------------------
| Offset | Size | Type     | Field      | Notes                                    |
|--------|------|----------|------------|------------------------------------------|
| 0x00   | 2    | uint16   | packet_id  | 0x0bc4                                   |
| 0x02   | 2    | uint16   | payload_len| 0x24 (36)                                |
| 0x04   | 1    | uint8    | flag       | Always 1                                 |
| 0x05   | 3    | uint8[3] | unknown    | Always 0                                 |
| 0x08   | 28   | struct   | player     | See 03ee player block, for 1 player only |

Player Block (28 bytes; see also 03ee):
| Offset | Size | Type    | Field      | Notes                                    |
|--------|------|---------|------------|------------------------------------------|
| 0x00   | 8    | char[8] | player_id  | ASCII, zero-padded                       |
| 0x08   | 5    | uint8   | reserved   | Always 0                                 |
| 0x0D   | 1    | uint8   | character  | 1-8                                      |
| 0x0E   | 1    | uint8   | status     | 0=not ready, 1=ready                     |
| 0x0F   | 1    | uint8   | padding    | Always 0                                 |
| 0x10   | 4    | uint32  | rank       | Only LSB used                            |
| 0x14   | 4    | uint32  | unknown2   | Always 0                                 |
| 0x18   | 4    | uint32  | unknown3   | Always 0                                 |

--------------------------------------------------
Game Start Response (0x0bc0)
--------------------------------------------------
| Offset | Size | Type      | Field          | Notes                                                |
|--------|------|-----------|----------------|------------------------------------------------------|
| 0x00   | 2    | uint16    | packet_id      | Always 0x0bc0                                        |
| 0x02   | 2    | uint16    | payload_len    | Always 0x001a (26)                                   |
| 0x04   | 4    | uint8[4]  | flag           | Always 0x01 0x00 0x00 0x00                           |
| 0x08   | 16   | struct    | start_positions| 4 * (1 byte pos + 3 byte padding), total 16 bytes    |
| 0x18   | 2    | uint16    | vampire_id     | Player index (0–3) selected as vampire               |
| 0x1A   | 2    | uint16    | padding1       | Always 0x0000                                        |
| 0x1C   | 2    | uint16    | vampire_gender | 0 = female, 1 = male (randomized each match)         |
| 0x1E   | 2    | uint16    | padding2       | Always 0x0000                                        |
| 0x20   | 2    | uint16    | map_id         | 1–4, randomly chosen if map set to random            |

Notes:
- `start_positions` contains 4 unique random start positions (each 0–11), each as 1 byte followed by 3 bytes padding (total 16 bytes).
- `vampire_id` is the slot index (0–3) of the player selected as vampire for this round.
- `vampire_gender` is randomized each match and does **not** correlate with the character model.
- `map_id` is randomly selected if the lobby used the “random” map option; otherwise, it is the map selected in lobby.

--------------------------------------------------
Player Ready Ack (0x0bc1)
--------------------------------------------------
| Offset | Size | Type     | Field       | Notes                                       |
|--------|------|----------|-------------|---------------------------------------------|
| 0x00   | 2    | uint16   | packet_id   | Always 0x0bc1                               |
| 0x02   | 2    | uint16   | payload_len |                                             |
| 0x04   | 4/1  | uint8[4] | flag        | 0x01 0x00 0x00 0x00 if success, else 0x00   |
| 0x08   | 2    | uint16   | val         | 0x0001 if success, error code if failure    |

> - Sent by server in response to a player's "Ready/Unready" request in lobby.
> - `val` is usually 1 on success, otherwise indicates an error code (e.g. 5 = invalid, 1 = malformed).

--------------------------------------------------
Lobby Leave Ack (0x0bc2)
--------------------------------------------------
| Offset | Size | Type     | Field       | Notes                                       |
|--------|------|----------|-------------|---------------------------------------------|
| 0x00   | 2    | uint16   | packet_id   | Always 0x0bc2                               |
| 0x02   | 2    | uint16   | payload_len |                                             |
| 0x04   | 4/1  | uint8[4] | flag        | 0x01 0x00 0x00 0x00 if success, else 0x00   |
| 0x08   | 2    | uint16   | val         | 0x0001 if success, error code if failure    |

> - Sent by server when a player leaves a lobby (either by request or on disconnect).
> - `val` is usually 1 on success, otherwise indicates an error code (e.g. 1 = malformed request).


--------------------------------------------------
Kick Player Ack (0x0bc3)
--------------------------------------------------
| Offset | Size | Type     | Field       | Notes                                       |
|--------|------|----------|-------------|---------------------------------------------|
| 0x00   | 2    | uint16   | packet_id   | Always 0x0bc3                               |
| 0x02   | 2    | uint16   | payload_len |                                             |
| 0x04   | 4/1  | uint8[4] | flag        | 0x01 0x00 0x00 0x00 if success, else 0x00   |
| 0x08   | 2    | uint16   | val         | 0x0001 if success, error code if failure    |

> - Sent by the server to the player who was kicked AND to the initiator (lobby leader).
> - `val` is usually 1 on success, otherwise indicates an error code (e.g. 1 = malformed request).

--------------------------------------------------
Character Select Ack (0x0bc5)
--------------------------------------------------
| Offset | Size | Type     | Field       | Notes                                         |
|--------|------|----------|-------------|-----------------------------------------------|
| 0x00   | 2    | uint16   | packet_id   | Always 0x0bc5                                 |
| 0x02   | 2    | uint16   | payload_len |                                               |
| 0x04   | 4/1  | uint8[4] | flag        | 0x01 0x00 0x00 0x00 if success, else 0x00     |
| 0x08   | 2    | uint16   | val         | 0x0001 if success, error code if failure      |

> - Sent in response to a character selection request.
> - `val` is usually 1 if successful, or an error code otherwise.

--------------------------------------------------
Map Select Ack (0x0bc6)
--------------------------------------------------
| Offset | Size | Type     | Field       | Notes                                         |
|--------|------|----------|-------------|-----------------------------------------------|
| 0x00   | 2    | uint16   | packet_id   | Always 0x0bc6                                 |
| 0x02   | 2    | uint16   | payload_len |                                               |
| 0x04   | 4/1  | uint8[4] | flag        | 0x01 0x00 0x00 0x00 if success, else 0x00     |
| 0x08   | 2    | uint16   | val         | 0x0001 if success, error code if failure      |

> - Sent in response to a map selection request.
> - `val` is typically 0x0001 on success, or an error code (e.g. 0x0005) on failure.

--------------------------------------------------
Lobby Room State (0x03ee)
--------------------------------------------------
| Offset | Size    | Type      | Field         | Notes                                  |
|--------|---------|-----------|---------------|----------------------------------------|
| 0x00   | 2       | uint16le  | packet_id     | 0x03ee                                 |
| 0x02   | 2       | uint16le  | payload_len   | Always 0x9c (156 bytes)                |
| 0x04   | 1       | uint8     | lobby_leader  | Player slot index of leader (0-3)      |
| 0x05   | 3       | uint8[3]  | padding       | Always 0x00                            |
| 0x08   | 16      | char[16]  | lobby_name    | EUC-KR encoding, padded with 0x00      |
| 0x18   | 16      | uint8[16] | unknown1      | Always 0x00                            |
| 0x28   | 28*4    | struct[]  | players       | Up to 4 player blocks, see below       |
| 0x98   | 4       | uint32le  | map_select    | 1-5                                    |
| 0x9c   | 4       | uint32le  | lobby_flag    | Lobby status: 1 = waiting, 2 = started |

--------------------------------------------------
Player DC (0x03f4)
--------------------------------------------------
| Offset | Size | Type      | Field         | Notes                                |
|--------|------|-----------|---------------|--------------------------------------|
| 0x00   | 2    | uint16le  | packet_id     | 0x03f4                               |
| 0x02   | 2    | uint16le  | payload_len   | Always 0x04                          |
| 0x04   | 1    | uint8     | player_index  | Player slot index (0–3)              |
| 0x05   | 3    | uint8[3]  | padding       | Always 0x00                          |

-Notifies all players that a player has disconnected.
-If the vampire/traitor disconnects, the vampire will be controlled by AI. (the game does not end)
-If the host disconnects, another player acts as host for enemy AI movement broadcasting. 
-This packet is also sent before the countdown packet to each player with their own player_index, as if notifying them that they themselves have disconnected. This is unlikely to be an intended secondary use of the packet but seems to be the only way I have figured out to get the countdown to trigger reliably 100% of the time.

--------------------------------------------------
Countdown (0x03ef)
--------------------------------------------------
| Offset | Size | Type      | Field         | Notes                                |
|--------|------|-----------|---------------|--------------------------------------|
| 0x00   | 2    | uint16le  | packet_id     | 0x03ef                               |
| 0x02   | 2    | uint16le  | payload_len   | Always 0x01                          |
| 0x04   | 1    | uint8     | number        | Countdown number (4, 3, 2, 1, 0)     |

-Draws a number on screen for countdown at start of game (this is after the Game Start packet is broadcasted to all players and all players succeed an echo challenge).

--------------------------------------------------
Echo Challenge (0x03e9)
--------------------------------------------------
| Offset | Size | Type      | Field         | Notes                                |
|--------|------|-----------|---------------|--------------------------------------|
| 0x00   | 2    | uint16le  | packet_id     | 0x03e9                               |
| 0x02   | 2    | uint16le  | payload_len   | Always 0x04                          |
| 0x04   | 4    | uint8[4]  | payload       | Echo payload (default: 01 00 00 00)  |

-Challenge the client to echo back the 4-byte payload. If no reply is received, we can disconnect them and perform cleanup.

Player Block (see above).
==================================================================
III.  Bidirectional Packets
==================================================================

All Gameplay packets start with high byte 0x13. 
These packets are bidirectional and are initially sent from the client and meant to be broadcasted to players in the same active game. 
Some packets are meant to be broadcasted to all players including self (ex: enemy death animation will not play and vampire will not despawn if not self-broadcasted).
Others should not be self-broadcasted as they cause unwanted double triggers (ex: player attack causes double the amount of ammunition to be used when shooting and double the amount of mags to be used when reloading if self-broadcasted).

Player Movement (0x1388)
--------------------------------------------------
| Offset | Size | Type     | Field         | Notes                         |
|--------|------|----------|---------------|-------------------------------|
| 0x00   | 2    | uint16   | packet_id     | 0x1388                        |
| 0x02   | 2    | uint16   | payload_len   | 24                            |
| 0x04   | 4    | float32  | y_pos         |                               |
| 0x08   | 4    | float32  | x_pos         |                               |
| 0x0C   | 4    | float32  | player_heading|                               |
| 0x10   | 4    | float32  | cam_heading   |                               |
| 0x14   | 2    | bytes    | unknown1      |                               |
| 0x16   | 1    | uint8    | left_right    |                               |
| 0x17   | 1    | uint8    | up_down       |                               |
| 0x18   | 4    | bytes    | player_idx    | Player index (slot 0–3?)      |

Gameplay Broadcast (0x13xx)
--------------------------------------------------
- 0x13xx packets (where xx varies):  
  - 0x139c: Incident proximity scan (not self-broadcasted)
  - 0x138c: Player attack (not self-broadcasted)
  - 0x1390: Enemy attack (not self-broadcasted)
  - 0x1394: Enemy movement (broadcasted to all)
  - Others: Default to full lobby broadcast

--------------------------------------------------
NOTES AND DESIGN CLARIFICATIONS
--------------------------------------------------
- All client/server packets are little-endian, with 2-byte packet_id, 2-byte payload length.
- Echo check (0x03e9/0x03ea) is now robust: both keepalive and readycheck challenges are supported, with tokens and status-tracking per session.
- Player DC packet (0x03f4) is sent for disconnected/lost slots, during readycheck or after echo timeout.
- Countdown packets (0x03ef) are sent 4,3,2,1,0 before game start, after all players are marked READY or DC'd.
- Lobby leader is always correctly re-assigned if NULL after removal, per DB logic.
- Full disconnect (kick, leave, or timeout) will always update lobby and broadcast to others.
- All lists (server/channel/lobby) are zero-padded to fixed maximum entries.
- Player movement and most gameplay events are always relayed to all other players in the lobby, except certain types as noted above.
- Rank points are updated via 0x03f3: +5 for victory, +2 for defeat.
- Quick Join finds a random public, open, waiting lobby and sends a matching ack (0x0bbf).